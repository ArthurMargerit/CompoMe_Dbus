#include "Types/CompoMe/String.hpp"

#include <dbus/dbus.h>

template <typename T> const char dbus_type();
template <typename T> const char *dbus_type_as_string();

template <> const char dbus_type<CompoMe::String>() { return 's'; }
template <> const char *dbus_type_as_string<CompoMe::String>() {
  return "s";
}

// DBus Message
DBusMessageIter &operator<<(DBusMessageIter &os, const CompoMe::String &pt) {
  const char * x = pt.str.c_str();
  if (false == dbus_message_iter_append_basic(&os, DBUS_TYPE_STRING, &x)) {
    throw "Not enough memory";
  }

  return os;
}

DBusMessageIter &operator>>(DBusMessageIter &is, CompoMe::String &pt) {
  if (dbus_message_iter_get_arg_type(&is) != DBUS_TYPE_STRING) {
    return is;
  }

  DBusBasicValue value;
  dbus_message_iter_get_basic(&is, &value);
  dbus_message_iter_next(&is);

  pt = CompoMe::String(value.str);
  return is;
}
